<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.0.xsd">
    <!--<context:component-scan base-package="com.mav.dao"/>-->
    <context:property-placeholder
            location="classpath:jdbc.properties,classpath:msjdbc.properties"/>

    <!-- mysql datasource -->
    <!-- <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"> -->
    <!-- <property name="username" value="${jdbc.user}"></property> -->
    <!-- <property name="password" value="${jdbc.password}"></property> -->
    <!-- <property name="driverClassName" value="${jdbc.driverClass}"></property> -->
    <!-- <property name="url" value="${jdbc.mybaUrl}"></property> -->
    <!-- </bean> -->

    <!-- sqlserver datasource -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="${ms.user}"></property>
        <property name="password" value="${ms.password}"></property>
        <property name="driverClassName" value="${ms.driverClass}"></property>
        <property name="url" value="${ms.jdbcUrl}"></property>
    </bean>

    <!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"> -->
    <!-- <property name="user" value="${ms.user}"></property> -->
    <!-- <property name="password" value="${ms.password}"></property> -->
    <!-- <property name="driverClass" value="${ms.driverClass}"></property> -->
    <!-- <property name="jdbcUrl" value="${ms.jdbcUrl}"></property> -->
    <!-- </bean> -->

    <bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--当mybatis的xml文件和mapper接口不在相同包下时，需要用mapperLocations属性指定xml文件的路径。 *是个通配符，代表所有的文件，**代表所有目录下 -->
        <!--<property name="mapperLocations" value="classpath:com/mav/dao/*.xml"></property>-->
        <!--也可以引入mybatis配置文件 -->
        <!--<property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml"></property> -->
    </bean>

    <!--通过扫描的模式，扫描目录在com.mav.dao目录下的mapper-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.mav.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource3" ref="dataSource3" /> </bean> -->

    <!-- redis session 配置 打开即可使用 web.xml 还有一个 -->
    <!--<bean id="redisHttpSessionConfiguration"-->
          <!--class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">-->
        <!--<property name="maxInactiveIntervalInSeconds" value="1800"/>-->
    <!--</bean>-->
    <!--<bean class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
        <!--<property name="hostName" value="192.168.10.183"/>-->
        <!--<property name="port" value="6379"/>-->
    <!--</bean>-->

</beans>  